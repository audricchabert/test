On a choisit de diviser notre projet de telle sorte que chacun puisse travailler en parrallèle, en limitant au maximum les "taches bloquantes". Un peu comme lors du TP sur les avions ou il fallait trouver une organisation optimal afin de maximiser la productivité. 

Partant sur cette optique, on a donc décidé de créer autant de classes qu'il n'y a de salles (chambres) dans le plateau individuel. C'est ainsi qu'on se retrouve avec les salleAtelier/salleLarve/salleNourrice/etc.. qui héritent toutes de la classe Salle. Ces classes ayant pour pierre angulaire le fait d'avoir un nombre de fourmis pouvant varier. 
Chaque salle possède sa propre logique, en effet, la création de larves ne coute pas autant de nourrice que la création d'ouvriere par exemple, il a fallu créer des méthodes distinctes afin de gérer cela. La classe Salle quant à elle se contente seulement de stocker le nombre de fourmis actuelle et d'en modifier la valeur.

Nous étions partit pour modéliser les évenements dans une classe à part. On a créé un Singleton qui contenait une linkedlist indiquant sur quel evenement nous étions actuellement. Seulement, avec cette méthode, il aurait été impossible de modéliser 2 joueurs simultanément, ce qui selon nous, aurait été handicapant pour programmer une IA efficace. De plus, travailler avec une linkedlist nous compliquait (beaucoup) le code. 
C'est pour toute ces raisons que nous avons décidé d'opter pour un tableau ou l'on retiendrait simplement le curseur actuel de l'évenement. 

Enfin, pour faire la communication entre les salle et le joueur, on a créé une classe GestionSalle qui se charge de faire l'intéraction entre toute les salles du plateau. Par exemple, si le joueur décide de créer des larves avec des nourrices, il envoit le message à "gestionSalle" qui lui même passe le messagee à "salleNourrice" et "salleLarve" pour respectivement supprimer les nourrices/ créer des larves. 

Cela nous a permit d'alléger le code, et de pouvoir travailler de manière simultanée sur différentes parties du projet.
